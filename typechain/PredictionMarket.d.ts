/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PredictionMarketInterface extends Interface {
  functions: {
    getCurrentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    isMarketOpen: TypedFunctionDescription<{ encode([]: []): string }>;

    predictPriceDown: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;

    predictPriceUp: TypedFunctionDescription<{
      encode([_amount]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class PredictionMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PredictionMarket;
  attach(addressOrName: string): PredictionMarket;
  deployed(): Promise<PredictionMarket>;

  on(event: EventFilter | string, listener: Listener): PredictionMarket;
  once(event: EventFilter | string, listener: Listener): PredictionMarket;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PredictionMarket;
  removeAllListeners(eventName: EventFilter | string): PredictionMarket;
  removeListener(eventName: any, listener: Listener): PredictionMarket;

  interface: PredictionMarketInterface;

  functions: {
    getCurrentPrice(): Promise<BigNumber>;

    isMarketOpen(): Promise<boolean>;

    predictPriceDown(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    predictPriceUp(
      _amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getCurrentPrice(): Promise<BigNumber>;

  isMarketOpen(): Promise<boolean>;

  predictPriceDown(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  predictPriceUp(
    _amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getCurrentPrice(): Promise<BigNumber>;

    isMarketOpen(): Promise<BigNumber>;

    predictPriceDown(_amount: BigNumberish): Promise<BigNumber>;

    predictPriceUp(_amount: BigNumberish): Promise<BigNumber>;
  };
}
