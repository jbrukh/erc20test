/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PredictionMarketInterface extends Interface {
  functions: {
    buy: TypedFunctionDescription<{ encode([]: []): string }>;

    claimRewards: TypedFunctionDescription<{ encode([]: []): string }>;

    getChallengeBlock: TypedFunctionDescription<{ encode([]: []): string }>;

    getClaimPeriodBlock: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getDeposits: TypedFunctionDescription<{ encode([addr]: [string]): string }>;

    moveMarketDown: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    moveMarketUp: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    PredictPriceAbove: TypedEventDescription<{
      encodeTopics([predictor, amount, assetPrice]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    PredictPriceBelow: TypedEventDescription<{
      encodeTopics([predictor, amount, assetPrice]: [
        string | null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class PredictionMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PredictionMarket;
  attach(addressOrName: string): PredictionMarket;
  deployed(): Promise<PredictionMarket>;

  on(event: EventFilter | string, listener: Listener): PredictionMarket;
  once(event: EventFilter | string, listener: Listener): PredictionMarket;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PredictionMarket;
  removeAllListeners(eventName: EventFilter | string): PredictionMarket;
  removeListener(eventName: any, listener: Listener): PredictionMarket;

  interface: PredictionMarketInterface;

  functions: {
    buy(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    claimRewards(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getChallengeBlock(): Promise<BigNumber>;

    getClaimPeriodBlock(): Promise<BigNumber>;

    getCurrentPrice(): Promise<BigNumber>;

    getDeposits(addr: string): Promise<BigNumber>;

    moveMarketDown(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    moveMarketUp(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  buy(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  claimRewards(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  getChallengeBlock(): Promise<BigNumber>;

  getClaimPeriodBlock(): Promise<BigNumber>;

  getCurrentPrice(): Promise<BigNumber>;

  getDeposits(addr: string): Promise<BigNumber>;

  moveMarketDown(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  moveMarketUp(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {
    PredictPriceAbove(
      predictor: string | null,
      amount: null,
      assetPrice: null
    ): EventFilter;

    PredictPriceBelow(
      predictor: string | null,
      amount: null,
      assetPrice: null
    ): EventFilter;
  };

  estimate: {
    buy(): Promise<BigNumber>;

    claimRewards(): Promise<BigNumber>;

    getChallengeBlock(): Promise<BigNumber>;

    getClaimPeriodBlock(): Promise<BigNumber>;

    getCurrentPrice(): Promise<BigNumber>;

    getDeposits(addr: string): Promise<BigNumber>;

    moveMarketDown(amount: BigNumberish): Promise<BigNumber>;

    moveMarketUp(amount: BigNumberish): Promise<BigNumber>;

    withdraw(): Promise<BigNumber>;
  };
}
